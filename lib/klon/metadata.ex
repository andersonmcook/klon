defmodule Klon.Metadata do
  @moduledoc false

  alias Ecto.Association
  alias Klon.Strategies.{Default, SelfReferential}

  defstruct ~w(
      assocs
      mapping
      parent_assocs
      reset_fields
      root
      schema
      self_referential_fields
      strategy
    )a

  @typedoc """
  Metadata used to facilitate cloning.

  # Fields

    * `:assocs` - All associations defined on the schema.
    * `:mapping` - Mapping of parent association names for the schema.
    * `:parent_assocs` - Mapping of the schema's parent associations.
    * `:reset_fields` - Autogenerated fields and primary keys to reset.
    * `:root` - If the schema is the first to be cloned.
    * `:self_referential_fields` - Fields that refer to itself.
    * `:strategy` - The strategy used when cloning.
  """
  @type t :: %__MODULE__{
          assocs: [atom],
          mapping: %{atom => Association.t()},
          parent_assocs: %{atom => Association.t()},
          reset_fields: [atom],
          root: boolean,
          schema: module,
          self_referential_fields: [atom],
          strategy: Default | SelfReferential
        }

  @spec new(module, [{:root, boolean}]) :: t
  def new(schema, opts \\ []) do
    fields = schema.__changeset__()
    self_referential_fields = self_referential_fields(fields)

    %__MODULE__{
      assocs: schema.__schema__(:associations),
      mapping: mapping(fields),
      parent_assocs: parent_assocs(fields),
      reset_fields: reset_fields(schema),
      root: Keyword.get(opts, :root, false),
      schema: schema,
      self_referential_fields: self_referential_fields,
      strategy: strategy(self_referential_fields)
    }
  end

  defp mapping(parent_fields) do
    for {_, {:assoc, parent_assoc}} <- parent_fields,
        parent_assoc.relationship == :child,
        {_, {:assoc, child_assoc}} <- parent_assoc.related.__changeset__(),
        parent_assoc.owner == child_assoc.related,
        child_assoc.relationship == :parent,
        into: %{} do
      {parent_assoc.field, child_assoc}
    end
  end

  defp parent_assocs(fields) do
    for {field, {:assoc, %{relationship: :parent} = assoc}} <- fields, into: %{} do
      {field, assoc}
    end
  end

  defp reset_fields(schema) do
    Enum.flat_map(~w(autogenerate_fields primary_key)a, &schema.__schema__/1)
  end

  defp self_referential_fields(fields) do
    for {_, {:assoc, %{owner: same, related: same, relationship: :parent} = assoc}} <- fields,
        key <- [assoc.owner_key, assoc.field] do
      key
    end
  end

  defp strategy([]), do: Default
  defp strategy(_), do: SelfReferential
end
